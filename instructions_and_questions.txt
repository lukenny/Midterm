Instructions for Mid-Term submission and Git Review (10pts):
 - Create a git repository for your answers - https://github.com/lukenny/Midterm
 - Add and Commit as you work through the questions and programming problems
 - Your git log should reflect your work, don't just commit after you have finished working
 - Use .gitignore to ignore any files that are not relevant to the midterm
 - E-mail me your ssh public key - done
 - I will email you back with your repository name
 - Add a remote to your git repository: git@reneedv.com:RubyFall2014/kenny.git - done
 - Push your changes to the remote
 - After 6pm Thursday November 13th you will not be able to push to your remote repository (or clone).

 Questions (20pts):
 - What are the three uses of the curly brackets {} in Ruby?
We can use {} to create hash for instance a = {1 => 2}
We can use {...} for short or inline blocks. The {} have higher precedence than do..end. It attaches to the inner method.
We can use {} it with string. For example:
"three plus three is #{3+3}"
==> "three plus three is 6"

 - What is a regular expression and what is a common use for them?
Regular expression is used to test whether a string contains a given pattern.
For example:
/hello/.match('world') #=> nil

 - What is the difference between how a String, a symbol, a FixNum, and a Float are stored in Ruby?
Strings are mutable and ruby interpreter doesn't know what the string's data. String needs to have its own place in memory.
Symbols are immutable and it stays in memory throughout the program operation. It can be retrieved from memory of instantiation. Optimized symbols dictionary is used to keep track of symbols; in other words, symbols can be used effectively to keep the application running faster and more consistently.
Fixnums are stored directly in the VALUE itself; hence no need to keep a lookup table. Two fixnums of integer 1234 are actually the same instance.
Floats are numbers with decimal places and are stored as non-immediates which require a new memory allocation


 - Are these two statements equivalent? Why or Why Not?
   1. x, y = "hello", "hello"
   2. x = y = "hello"
They are not equivalent. There are two different objects in #1 versus there is only one object in #2; in other words, x and y are truly the same in #2.

- What is the difference between a Range and an Array?
Range is an object that has a s start and an end and it moves without enumerate elements in between.
An array holds a collection of object references and each reference has a specific position identified by an integer index.
Array is indexed using the [] operator.

- Why would I use a Hash instead of an Array?
Hash should be used when index with keys makes more sense and reference position does not matter.
An Array should be used if order of the values matters.

- What is your favorite thing about Ruby so far?
It is very readable and legible and it works with Chef.

- What is your least favorite thing about Ruby so far?
So many ways to do the very same thing; like you said in class, there are always 3 or 4 ways to do the same operation.
So I always question and cast doubt if my chosen method makes sense or the most efficient.

 Programming Problems (10pts each):
 - Write a passing rspec file called even_number_spec.rb that tests a class called EvenNumber.
    - The EvenNumber class should:
       - Only allow even numbers
       - Get the next even number
       - Compare even numbers
       - Generate a range of even numbers
- Make the rspec tests in wish_list_spec.rb pass by writing a WishList class
   - The WishList class should:
      - Mixin Enumerable
      - Define each so it returns wishes as strings with their index as part of the string

Mid-Term Spec (50pts):
- Make the tests pass.
